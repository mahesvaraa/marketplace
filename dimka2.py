import asyncio
import logging
import math
import random
from collections import deque
from datetime import datetime

import cv2
import numpy as np
from playwright.async_api import async_playwright

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("script.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

WINDOW_WIDTH = 989
WINDOW_HEIGHT = 788
CENTER_X = WINDOW_WIDTH // 2
CENTER_Y = WINDOW_HEIGHT // 2
GAME_URL = "https://wormax.io/?party=bot92"

# Настройки
SCAN_STEP = 2  # Сканируем через один пиксель (шахматный порядок)
VISION_UPDATE_INTERVAL = 0.05
MOVEMENT_SMOOTHING = 0  # Отключаем сглаживание движения
BOOST_RESET_INTERVAL = 3.0  # Интервал сброса ускорения в секундах

# Кэширование последних позиций
POSITION_HISTORY = deque(maxlen=3)

# Цвета врагов (сокращено до двух случайных цветов)
ENEMY_COLORS = np.array([
    [0, 0, 0],
    [0, 0, 111],
    [0, 0, 161],
    [0, 0, 170],
    [0, 0, 187],
    [0, 0, 189],
    [0, 0, 220],
    [0, 0, 233],
    [0, 0, 234],
    [0, 0, 235],
    [0, 0, 244],
    [0, 0, 247],
    [0, 0, 252],
    [0, 2, 153],
    [0, 8, 64],
    [0, 11, 64],
    [0, 11, 226],
    [0, 15, 74],
    [0, 25, 255],
    [0, 40, 75],
    [0, 57, 29],
    [0, 62, 38],
    [0, 111, 122],
    [0, 112, 198],
    [0, 117, 255],
    [0, 119, 169],
    [0, 125, 255],
    [0, 145, 245],
    [0, 147, 200],
    [0, 148, 195],
    [0, 157, 255],
    [0, 169, 77],
    [0, 185, 95],
    [0, 216, 96],
    [0, 226, 255],
    [0, 236, 255],
    [0, 247, 255],
    [0, 255, 254],
    [0, 255, 255],
    [1, 0, 247],
    [1, 0, 248],
    [1, 3, 134],
    [1, 98, 245],
    [1, 169, 248],
    [1, 176, 245],
    [1, 218, 255],
    [2, 0, 91],
    [2, 2, 164],
    [2, 4, 169],
    [2, 29, 232],
    [2, 74, 102],
    [2, 209, 255],
    [2, 242, 76],
    [2, 255, 242],
    [3, 18, 10],
    [3, 27, 8],
    [3, 217, 255],
    [3, 222, 250],
    [3, 233, 251],
    [3, 235, 65],
    [4, 147, 23],
    [4, 226, 255],
    [5, 5, 241],
    [5, 22, 247],
    [5, 45, 251],
    [5, 148, 244],
    [5, 159, 125],
    [5, 216, 255],
    [6, 0, 103],
    [7, 2, 212],
    [7, 17, 210],
    [7, 41, 205],
    [7, 46, 149],
    [9, 10, 28],
    [9, 19, 213],
    [10, 0, 218],
    [10, 10, 132],
    [10, 10, 134],
    [10, 11, 171],
    [10, 20, 205],
    [11, 11, 215],
    [11, 29, 242],
    [11, 53, 154],
    [11, 129, 25],
    [11, 175, 96],
    [12, 30, 247],
    [12, 55, 190],
    [12, 204, 255],
    [13, 4, 238],
    [13, 14, 173],
    [13, 21, 74],
    [13, 116, 0],
    [13, 168, 69],
    [14, 9, 24],
    [14, 14, 214],
    [14, 15, 242],
    [14, 16, 34],
    [14, 181, 95],
    [14, 219, 80],
    [15, 2, 216],
    [15, 25, 231],
    [15, 26, 216],
    [15, 61, 194],
    [16, 156, 56],
    [16, 210, 255],
    [17, 6, 245],
    [17, 15, 189],
    [17, 123, 0],
    [17, 206, 86],
    [17, 252, 98],
    [18, 18, 179],
    [18, 38, 105],
    [18, 62, 160],
    [18, 129, 254],
    [18, 208, 83],
    [18, 255, 101],
    [19, 34, 100],
    [19, 116, 237],
    [19, 119, 18],
    [19, 134, 255],
    [20, 36, 45],
    [20, 66, 158],
    [20, 70, 172],
    [20, 107, 247],
    [20, 124, 255],
    [21, 11, 235],
    [21, 11, 244],
    [21, 33, 244],
    [21, 181, 255],
    [22, 22, 54],
    [22, 61, 119],
    [22, 66, 167],
    [22, 107, 249],
    [22, 184, 217],
    [22, 214, 65],
    [23, 20, 248],
    [23, 31, 199],
    [23, 63, 120],
    [23, 103, 114],
    [23, 121, 184],
    [23, 208, 127],
    [23, 215, 72],
    [23, 219, 141],
    [23, 227, 75],
    [24, 34, 255],
    [24, 119, 181],
    [24, 176, 0],
    [24, 187, 255],
    [24, 228, 63],
    [25, 17, 39],
    [25, 30, 156],
    [25, 95, 251],
    [25, 118, 109],
    [25, 178, 0],
    [25, 195, 221],
    [25, 229, 60],
    [26, 19, 42],
    [26, 30, 161],
    [26, 94, 251],
    [27, 67, 123],
    [27, 75, 130],
    [27, 155, 9],
    [27, 217, 73],
    [28, 15, 218],
    [28, 129, 82],
    [28, 161, 86],
    [29, 29, 255],
    [29, 64, 198],
    [29, 87, 116],
    [29, 110, 202],
    [29, 123, 255],
    [29, 255, 255],
    [30, 17, 233],
    [30, 28, 23],
    [30, 125, 255],
    [31, 30, 25],
    [31, 32, 31],
    [31, 47, 124],
    [31, 81, 181],
    [31, 165, 123],
    [32, 12, 231],
    [32, 17, 209],
    [33, 13, 238],
    [33, 17, 230],
    [33, 18, 216],
    [33, 31, 212],
    [33, 102, 221],
    [33, 209, 95],
    [34, 35, 201],
    [34, 149, 160],
    [35, 0, 242],
    [35, 0, 243],
    [35, 46, 229],
    [35, 82, 149],
    [35, 233, 255],
    [36, 38, 136],
    [36, 233, 255],
    [36, 241, 255],
    [37, 52, 57],
    [38, 80, 169],
    [38, 155, 69],
    [38, 179, 255],
    [38, 235, 148],
    [39, 66, 112],
    [39, 106, 146],
    [39, 142, 5],
    [39, 183, 255],
    [39, 213, 255],
    [40, 61, 98],
    [40, 65, 168],
    [40, 78, 145],
    [40, 240, 255],
    [41, 31, 212],
    [41, 73, 77],
    [41, 81, 165],
    [41, 144, 6],
    [41, 255, 255],
    [42, 16, 181],
    [42, 37, 201],
    [42, 42, 42],
    [42, 49, 200],
    [42, 52, 43],
    [42, 153, 0],
    [42, 208, 13],
    [42, 211, 255],
    [43, 15, 225],
    [43, 16, 184],
    [43, 33, 176],
    [43, 209, 13],
    [44, 15, 216],
    [44, 16, 220],
    [44, 42, 56],
    [44, 60, 104],
    [44, 157, 6],
    [44, 175, 1],
    [44, 177, 0],
    [45, 17, 227],
    [45, 69, 111],
    [45, 203, 0],
    [45, 205, 0],
    [46, 6, 221],
    [46, 16, 218],
    [46, 57, 49],
    [46, 60, 91],
    [46, 242, 255],
    [46, 244, 255],
    [47, 17, 239],
    [47, 53, 48],
    [47, 204, 255],
    [47, 255, 255],
    [48, 61, 66],
    [49, 60, 80],
    [49, 199, 0],
    [49, 200, 0],
    [50, 62, 68],
    [50, 76, 201],
    [50, 161, 12],
    [50, 162, 12],
    [51, 53, 52],
    [51, 59, 79],
    [51, 60, 206],
    [52, 50, 52],
    [52, 53, 87],
    [52, 161, 104],
    [52, 215, 255],
    [53, 53, 53],
    [53, 140, 251],
    [53, 196, 255],
    [54, 57, 92],
    [55, 28, 7],
    [55, 92, 160],
    [55, 95, 169],
    [55, 124, 169],
    [55, 131, 178],
    [56, 110, 237],
    [57, 53, 57],
    [57, 55, 52],
    [58, 46, 42],
    [59, 78, 88],
    [59, 91, 201],
    [59, 171, 255],
    [60, 38, 61],
    [60, 57, 54],
    [61, 38, 43],
    [61, 64, 235],
    [62, 59, 73],
    [62, 166, 0],
    [62, 198, 250],
    [63, 58, 64],
    [63, 60, 63],
    [63, 64, 61],
    [63, 146, 9],
    [65, 82, 106],
    [66, 41, 14],
    [66, 74, 255],
    [66, 108, 169],
    [66, 118, 220],
    [66, 197, 249],
    [67, 255, 185],
    [68, 28, 255],
    [68, 71, 236],
    [68, 122, 223],
    [69, 69, 70],
    [71, 0, 213],
    [71, 68, 195],
    [71, 80, 104],
    [71, 153, 7],
    [72, 71, 72],
    [72, 72, 72],
    [72, 190, 16],
    [73, 34, 211],
    [73, 84, 113],
    [73, 121, 187],
    [74, 34, 238],
    [74, 108, 180],
    [74, 115, 175],
    [75, 175, 13],
    [76, 77, 187],
    [76, 138, 17],
    [77, 90, 133],
    [77, 112, 184],
    [77, 255, 213],
    [78, 155, 57],
    [79, 75, 67],
    [79, 109, 131],
    [80, 14, 0],
    [80, 75, 66],
    [80, 141, 238],
    [81, 74, 69],
    [81, 131, 168],
    [81, 136, 203],
    [81, 176, 14],
    [81, 254, 255],
    [82, 177, 14],
    [83, 110, 216],
    [84, 0, 89],
    [85, 35, 167],
    [85, 99, 132],
    [85, 180, 229],
    [86, 79, 73],
    [88, 137, 212],
    [89, 169, 204],
    [90, 1, 255],
    [90, 3, 250],
    [90, 80, 74],
    [91, 165, 201],
    [91, 186, 255],
    [91, 227, 255],
    [91, 255, 255],
    [92, 22, 208],
    [92, 30, 2],
    [92, 126, 218],
    [94, 3, 255],
    [94, 38, 27],
    [94, 154, 0],
    [94, 255, 203],
    [95, 5, 254],
    [95, 59, 200],
    [95, 239, 100],
    [96, 105, 252],
    [96, 106, 255],
    [97, 40, 117],
    [97, 225, 255],
    [98, 69, 241],
    [98, 121, 170],
    [98, 138, 210],
    [98, 171, 62],
    [99, 56, 175],
    [100, 16, 103],
    [100, 95, 255],
    [100, 162, 0],
    [100, 195, 142],
    [100, 239, 101],
    [101, 94, 95],
    [101, 162, 210],
    [102, 100, 101],
    [102, 216, 248],
    [103, 77, 182],
    [104, 103, 105],
    [104, 113, 115],
    [105, 41, 122],
    [105, 193, 255],
    [106, 167, 216],
    [107, 74, 247],
    [107, 166, 97],
    [107, 222, 255],
    [108, 176, 63],
    [109, 189, 190],
    [111, 219, 255],
    [111, 234, 255],
    [112, 83, 177],
    [113, 152, 184],
    [113, 170, 216],
    [114, 155, 1],
    [114, 174, 244],
    [115, 86, 188],
    [115, 134, 143],
    [116, 168, 237],
    [117, 168, 196],
    [118, 226, 153],
    [119, 71, 147],
    [119, 161, 1],
    [120, 0, 76],
    [120, 64, 127],
    [122, 58, 0],
    [124, 117, 255],
    [125, 108, 128],
    [126, 122, 255],
    [126, 230, 255],
    [128, 169, 189],
    [129, 164, 194],
    [129, 206, 236],
    [130, 3, 88],
    [130, 116, 255],
    [130, 244, 255],
    [132, 179, 238],
    [132, 189, 219],
    [132, 225, 155],
    [133, 119, 108],
    [133, 131, 136],
    [134, 62, 0],
    [134, 109, 253],
    [134, 255, 209],
    [137, 170, 199],
    [137, 204, 222],
    [138, 18, 0],
    [138, 118, 116],
    [139, 29, 5],
    [139, 70, 12],
    [139, 190, 59],
    [139, 191, 57],
    [140, 71, 12],
    [140, 175, 72],
    [140, 204, 220],
    [141, 77, 0],
    [141, 129, 116],
    [142, 205, 6],
    [143, 254, 255],
    [144, 177, 84],
    [145, 127, 255],
    [145, 174, 178],
    [145, 205, 253],
    [146, 117, 255],
    [146, 143, 246],
    [147, 31, 6],
    [147, 181, 82],
    [148, 134, 112],
    [148, 155, 172],
    [149, 128, 128],
    [149, 186, 74],
    [150, 148, 196],
    [150, 148, 255],
    [151, 69, 7],
    [151, 136, 113],
    [151, 170, 99],
    [152, 83, 81],
    [152, 114, 57],
    [152, 210, 255],
    [153, 13, 129],
    [155, 84, 0],
    [155, 93, 91],
    [155, 175, 35],
    [156, 14, 132],
    [156, 27, 53],
    [156, 218, 68],
    [157, 168, 174],
    [157, 168, 178],
    [158, 178, 215],
    [158, 223, 0],
    [159, 0, 72],
    [159, 13, 112],
    [159, 124, 64],
    [160, 180, 104],
    [160, 227, 0],
    [161, 16, 116],
    [161, 198, 89],
    [161, 215, 0],
    [161, 219, 70],
    [161, 234, 235],
    [162, 107, 17],
    [162, 173, 40],
    [162, 192, 92],
    [164, 0, 142],
    [164, 7, 107],
    [164, 160, 190],
    [164, 174, 187],
    [164, 226, 70],
    [165, 5, 106],
    [165, 12, 112],
    [165, 184, 218],
    [166, 164, 216],
    [166, 197, 94],
    [167, 0, 143],
    [167, 14, 114],
    [167, 160, 177],
    [167, 188, 27],
    [167, 227, 72],
    [168, 246, 245],
    [169, 0, 94],
    [169, 227, 255],
    [169, 228, 255],
    [169, 234, 68],
    [170, 235, 69],
    [171, 219, 255],
    [172, 0, 94],
    [172, 69, 58],
    [172, 92, 0],
    [172, 94, 0],
    [173, 0, 108],
    [173, 68, 55],
    [173, 182, 42],
    [174, 169, 200],
    [174, 175, 219],
    [174, 182, 159],
    [175, 204, 171],
    [176, 174, 174],
    [176, 174, 175],
    [177, 0, 95],
    [177, 86, 12],
    [177, 87, 13],
    [178, 60, 4],
    [179, 26, 108],
    [179, 80, 32],
    [180, 14, 107],
    [180, 174, 191],
    [180, 247, 76],
    [181, 81, 15],
    [181, 149, 141],
    [182, 13, 108],
    [182, 48, 43],
    [183, 214, 109],
    [183, 218, 102],
    [183, 252, 81],
    [184, 85, 29],
    [184, 99, 22],
    [184, 105, 76],
    [185, 64, 140],
    [186, 44, 6],
    [186, 217, 114],
    [186, 247, 85],
    [187, 255, 255],
    [188, 212, 97],
    [189, 101, 22],
    [189, 167, 246],
    [189, 173, 161],
    [189, 213, 101],
    [190, 171, 153],
    [190, 225, 109],
    [190, 250, 89],
    [191, 75, 2],
    [191, 177, 168],
    [192, 167, 245],
    [192, 176, 164],
    [192, 178, 169],
    [193, 56, 12],
    [193, 68, 5],
    [193, 188, 226],
    [194, 67, 1],
    [194, 122, 96],
    [194, 175, 160],
    [194, 194, 161],
    [195, 180, 176],
    [196, 21, 0],
    [196, 50, 11],
    [196, 77, 2],
    [196, 196, 164],
    [196, 205, 209],
    [197, 224, 247],
    [198, 56, 0],
    [199, 70, 2],
    [199, 70, 6],
    [200, 185, 180],
    [201, 126, 94],
    [202, 178, 157],
    [202, 235, 252],
    [203, 112, 18],
    [203, 127, 95],
    [203, 160, 148],
    [203, 162, 156],
    [203, 165, 150],
    [204, 133, 12],
    [205, 75, 1],
    [205, 98, 74],
    [205, 236, 255],
    [205, 240, 255],
    [206, 112, 21],
    [207, 77, 241],
    [208, 74, 0],
    [208, 175, 172],
    [209, 120, 23],
    [209, 182, 160],
    [209, 196, 238],
    [210, 201, 165],
    [211, 180, 176],
    [212, 77, 26],
    [212, 114, 24],
    [212, 165, 158],
    [213, 103, 71],
    [213, 161, 147],
    [215, 192, 245],
    [215, 204, 165],
    [216, 191, 75],
    [216, 201, 191],
    [216, 216, 216],
    [217, 73, 11],
    [217, 196, 77],
    [217, 204, 205],
    [217, 216, 216],
    [217, 218, 202],
    [217, 219, 200],
    [218, 173, 48],
    [219, 69, 13],
    [219, 70, 0],
    [220, 0, 143],
    [220, 65, 0],
    [220, 90, 83],
    [220, 251, 143],
    [221, 78, 11],
    [221, 82, 8],
    [221, 83, 9],
    [222, 92, 86],
    [222, 251, 149],
    [223, 83, 9],
    [223, 178, 52],
    [223, 187, 128],
    [224, 72, 14],
    [224, 87, 10],
    [226, 214, 215],
    [228, 66, 19],
    [228, 190, 128],
    [229, 0, 150],
    [229, 152, 143],
    [229, 222, 209],
    [231, 202, 177],
    [231, 219, 220],
    [231, 229, 255],
    [232, 143, 246],
    [232, 204, 181],
    [232, 225, 210],
    [233, 231, 232],
    [233, 255, 168],
    [235, 174, 109],
    [235, 215, 215],
    [236, 143, 248],
    [238, 222, 225],
    [238, 234, 228],
    [238, 238, 238],
    [238, 255, 178],
    [239, 193, 138],
    [240, 240, 240],
    [241, 108, 33],
    [242, 104, 27],
    [242, 180, 174],
    [242, 222, 206],
    [242, 223, 207],
    [243, 240, 238],
    [243, 254, 255],
    [244, 92, 31],
    [244, 232, 218],
    [246, 234, 219],
    [246, 236, 222],
    [246, 237, 223],
    [247, 238, 225],
    [247, 240, 227],
    [247, 241, 229],
    [248, 186, 117],
    [248, 204, 145],
    [248, 204, 155],
    [248, 205, 158],
    [248, 220, 178],
    [248, 235, 219],
    [248, 247, 255],
    [249, 223, 225],
    [250, 84, 200],
    [250, 240, 226],
    [250, 255, 255],
    [251, 233, 218],
    [251, 255, 255],
    [252, 80, 14],
    [252, 120, 8],
    [252, 226, 189],
    [252, 241, 226],
    [253, 73, 157],
    [253, 131, 11],
    [253, 252, 255],
    [254, 223, 219],
    [255, 23, 216],
    [255, 73, 13],
    [255, 95, 240],
    [255, 101, 44],
    [255, 114, 40],
    [255, 115, 14],
    [255, 116, 40],
    [255, 118, 45],
    [255, 122, 45],
    [255, 123, 15],
    [255, 125, 19],
    [255, 126, 39],
    [255, 127, 19],
    [255, 127, 39],
    [255, 137, 57],
    [255, 138, 34],
    [255, 139, 1],
    [255, 142, 57],
    [255, 142, 58],
    [255, 145, 0],
    [255, 152, 91],
    [255, 162, 3],
    [255, 169, 0],
    [255, 182, 180],
    [255, 199, 209],
    [255, 211, 124],
    [255, 217, 226],
    [255, 221, 132],
    [255, 225, 144],
    [255, 226, 92],
    [255, 233, 150],
    [255, 237, 255],
    [255, 240, 227],
    [255, 240, 239],
    [255, 247, 68],
    [255, 247, 233],
    [255, 247, 234],
    [255, 248, 241],
    [255, 249, 81],
    [255, 250, 236],
    [255, 251, 232],
    [255, 251, 239],
    [255, 252, 207],
    [255, 252, 238],
    [255, 253, 74],
    [255, 255, 89],
    [255, 255, 96],
    [255, 255, 97],
    [255, 255, 109],
    [255, 255, 111],
    [255, 255, 114],
    [255, 255, 211],
    [255, 255, 220],
    [255, 255, 226],
    [255, 255, 231],
    [255, 255, 232],
    [255, 255, 239],
    [255, 255, 240],
    [255, 255, 242],
    [255, 255, 244],
    [255, 255, 248],
    [255, 255, 253],
    [255, 255, 255]
], dtype=np.uint8)

class WormaxBot:
    def __init__(self):
        self.last_target = None
        self.last_move_time = datetime.now()
        self.last_boost_reset = datetime.now()
        self.current_direction = 0
        self.smoothed_position = (CENTER_X, CENTER_Y)
        self.enemy_detection_threshold = 10  # Порог для обнаружения цветов
        self.visualization_window = "Bot Vision"
        self.is_boosting = False

    async def initialize(self):
        self.browser = await self.launch_browser()
        self.page = await self.browser.new_page()
        await self.page.set_viewport_size({"width": WINDOW_WIDTH, "height": WINDOW_HEIGHT})
        cv2.namedWindow(self.visualization_window, cv2.WINDOW_NORMAL)
        cv2.resizeWindow(self.visualization_window, WINDOW_WIDTH // 2, WINDOW_HEIGHT // 2)

    @staticmethod
    async def launch_browser():
        playwright = await async_playwright().start()
        return await playwright.chromium.launch(
            headless=False,
            args=[
                f'--window-size={WINDOW_WIDTH},{WINDOW_HEIGHT}',
                '--incognito',
                '--disable-gpu',
                '--no-sandbox',
                '--disable-dev-shm-usage'
            ]
        )

    def create_color_mask(self, image, colors, threshold):
        """Создание маски цветов с настраиваемым порогом"""
        mask = np.zeros((image.shape[0], image.shape[1]), dtype=np.uint8)

        for color in colors:
            lower_bound = np.array([max(0, c - threshold) for c in color], dtype=np.uint8)
            upper_bound = np.array([min(255, c + threshold) for c in color], dtype=np.uint8)
            color_mask = cv2.inRange(image, lower_bound, upper_bound)
            mask = cv2.bitwise_or(mask, color_mask)

        return mask

    def find_objects(self, image, colors, threshold):
        """Поиск объектов на изображении (шахматный порядок)"""
        mask = self.create_color_mask(image, colors, threshold)

        objects = []
        for y in range(0, mask.shape[0], SCAN_STEP):  # Сканируем через одну строку
            for x in range(0, mask.shape[1], SCAN_STEP):  # Сканируем через один столбец
                if mask[y, x] > 0:  # Если пиксель совпадает с цветом врага
                    objects.append((x, y))

        return objects, mask

    async def toggle_boost(self):
        """Переключение ускорения"""
        current_time = datetime.now()
        if (current_time - self.last_boost_reset).total_seconds() >= BOOST_RESET_INTERVAL:
            await self.page.keyboard.up('Q')
            await asyncio.sleep(0.1)
            await self.page.keyboard.down('Q')
            self.last_boost_reset = current_time
            logger.info("Boost reset")

    def create_visualization(self, image, enemies, target_point):
        """Создание визуализации"""
        viz_image = image.copy()

        # Отмечаем врагов красным
        for x, y in enemies:
            cv2.circle(viz_image, (x, y), 5, (0, 0, 255), -1)

        # Отмечаем целевую точку зеленым
        if target_point:
            cv2.circle(viz_image, target_point, 10, (0, 255, 0), -1)
            cv2.line(viz_image, (CENTER_X, CENTER_Y), target_point, (0, 255, 0), 2)

        # Показываем изображение
        cv2.imshow(self.visualization_window, viz_image)
        cv2.waitKey(1)

    async def move_to_point(self, target_x, target_y):
        """Движение к точке"""
        current_time = datetime.now()
        if (current_time - self.last_move_time).total_seconds() < VISION_UPDATE_INTERVAL:
            return

        await self.page.mouse.move(target_x, target_y)
        await self.page.mouse.down()
        self.last_move_time = current_time

    def find_safe_point(self, enemies):
        """Поиск безопасной точки, максимально удаляющей бота от врагов"""
        if not enemies:
            # Если нет врагов, двигаемся по кругу
            angle = self.current_direction + random.uniform(-0.5, 0.5)
            return (
                CENTER_X + int(200 * math.cos(angle)),
                CENTER_Y + int(200 * math.sin(angle))
            )

        # Рассчитываем векторы до врагов и их общий вектор
        total_dx = total_dy = 0
        for ex, ey in enemies:
            dx = CENTER_X - ex
            dy = CENTER_Y - ey
            distance = math.sqrt(dx**2 + dy**2)
            if distance > 0:
                # Нормализуем вектор и прибавляем к общему
                total_dx += dx / distance
                total_dy += dy / distance

        # Нормализуем общий вектор, чтобы получить направление
        total_length = math.sqrt(total_dx**2 + total_dy**2)
        if total_length > 0:
            total_dx /= total_length
            total_dy /= total_length

        # Двигаемся в направлении, противоположном врагам
        escape_distance = 300
        escape_x = CENTER_X + int(total_dx * escape_distance)
        escape_y = CENTER_Y + int(total_dy * escape_distance)

        return escape_x, escape_y

    async def game_loop(self):
        try:
            await self.page.goto(GAME_URL, timeout=220000)
            await self.wait_for_space_press()

            # Включаем ускорение
            await self.page.keyboard.down('Q')
            self.is_boosting = True

            while True:
                # Делаем скриншот без сжатия
                screenshot = await self.page.screenshot()
                image = cv2.imdecode(np.frombuffer(screenshot, np.uint8), cv2.IMREAD_COLOR)

                # Уменьшаем изображение до 10% от исходного размера
                scale_percent = 10  # 10% от исходного размера
                width = int(image.shape[1] * scale_percent / 100)
                height = int(image.shape[0] * scale_percent / 100)
                dim = (width, height)
                resized_image = cv2.resize(image, dim, interpolation=cv2.INTER_AREA)

                # Ищем объекты на уменьшенном изображении
                enemies, enemy_mask = self.find_objects(resized_image, ENEMY_COLORS, self.enemy_detection_threshold)

                # Масштабируем координаты врагов обратно к исходному размеру
                enemies = [(int(x * 100 / scale_percent), int(y * 100 / scale_percent)) for x, y in enemies]

                # Логируем информацию
                logger.info(f"Найдено врагов: {len(enemies)}")

                # Определяем целевую точку
                target_point = self.find_safe_point(enemies)

                # Создаем визуализацию
                self.create_visualization(image, enemies, target_point)
                
                # Двигаемся к целевой точке
                await self.move_to_point(*target_point)
                
                # Обновляем ускорение
                await self.toggle_boost()
                
                await asyncio.sleep(VISION_UPDATE_INTERVAL)
                
        except Exception as e:
            logger.error(f"Ошибка в игровом цикле: {e}")
            raise

    async def wait_for_space_press(self):
        """Ожидание нажатия пробела"""
        await self.page.evaluate('''() => {
            window.spacePressed = false;
            window.addEventListener('keydown', (event) => {
                if (event.code === 'Space') window.spacePressed = true;
            });
        }''')
        await self.page.wait_for_function('window.spacePressed === true', timeout=220000)

async def main():
    bot = WormaxBot()
    try:
        await bot.initialize()
        await bot.game_loop()
    except Exception as e:
        logger.error(f"Критическая ошибка: {e}")
    finally:
        cv2.destroyAllWindows()
        await bot.browser.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"Ошибка при запуске: {e}")
    finally:
        input("Нажмите Enter для выхода...")